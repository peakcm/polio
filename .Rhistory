filter(periods < 2023.250) %>%
# filter(periods >= 2023.250) %>%
group_by(sabin2) %>%
summarize(sum(U_mOPV2))
#### Plot observable and expired risk ####
ggplot() +
geom_ridgeline(data = daily_U_surv, aes(x = periods, y = 0, height = U_mOPV2), color = "white", size = 1) +
geom_ridgeline(data = daily_U_surv_lag , aes(x = periods, y = 0, height = U_mOPV2,  color = sabin2),fill = "white", size = 1) +
geom_line(data = daily_U_surv, aes(x = periods, y = U_mOPV2, color = sabin2), linetype = "dashed", size = 1) +
geom_line(data = daily_U_surv_lag, aes(x = periods, y = U_mOPV2, color = sabin2), size = 1) +
geom_vline(xintercept = 2023.25) +
geom_point(data = viruses_count_period %>% filter(emergences > 0), aes(x = period, y = emergences, color = sabin2)) +
theme_bw() +
facet_grid(sabin2 == F~.) +
ylab("Expected cVDPV2 Emergences\n(Assuming Seeding at mOPV2 Rate)") +
xlab("Month") +
scale_y_continuous(limits = c(0, 7)) +
# theme(legend.position = c(0.85, 0.85)) +
scale_color_discrete(labels = c("nOPV2", "Sabin2"), name = "Vaccine Type")
# Identify confirmatory isolate for each emergence group
viruses = viruses %>% ungroup() %>% group_by(vdpv_emergence_group_name) %>%
mutate(ttl = as.numeric(virus_date - min(virus_date)))
viruses$conf_isolate <- FALSE
for (i in unique(viruses$vdpv_emergence_group_name)){
if (nrow(viruses[viruses$vdpv_emergence_group_name == i,"ttl"]) > 1){
min_ttl <- min(as.numeric(viruses[viruses$vdpv_emergence_group_name == i &
viruses$index_isolate == FALSE, "ttl"][[1]]))
viruses[viruses$vdpv_emergence_group_name == i &
viruses$ttl == min_ttl, "conf_isolate"] <- TRUE
}
}
# Identify repeats
repeats_ttl = viruses %>%
group_by(vdpv_emergence_group_name) %>%
filter(sum(conf_isolate)>1) %>%
select(vdpv_emergence_group_name) %>%
summarise(unique(vdpv_emergence_group_name))
for (i in unlist(repeats_ttl[,1])){
cat(i, sep = "\n")
temp <- NA
temp <- viruses[viruses$vdpv_emergence_group_name %in% i & viruses$conf_isolate == TRUE,"conf_isolate"]
viruses[viruses$vdpv_emergence_group_name %in% i & viruses$conf_isolate == TRUE,"conf_isolate"] <- c(TRUE, rep(FALSE, nrow(temp)-1)) #Arbitrarily set first to True
}
# Distribution for time-to-linkage
viruses %>%
filter(conf_isolate == TRUE) %>%
group_by(region_who_code) %>%
summarize(count = n(),
min = min(ttl),
q1 = quantile(ttl, 0.25),
median = median(ttl),
mean = mean(ttl),
q3 = quantile(ttl, 0.75),
max = max(ttl))
ggplot(viruses %>% filter(conf_isolate == TRUE, region_who_code %in% c("AFRO", "EMRO")), aes(x = ttl, fill = region_who_code)) +
geom_histogram() +
facet_wrap(region_who_code~.) +
xlab("Days") +
ylab("Emergence Groups")+
ggtitle("Time to Linkage (Index to Confirmatory Isolate)")
#estimate distribution with empirical bayes---- (based on methods for sequence lag estimation)
# get initial value from pooled data:
max_lag = 365
xx = viruses %>% filter(conf_isolate == TRUE, ttl < max_lag) %>% pull(ttl)
est = c(log(mean(xx)), log(1))
est = optim(est, function(x){ -sum(dgamma(xx, rate = exp(x[2] - x[1]),shape = exp(x[2]),log=TRUE)) })$par
est
curve(dgamma(x,rate = exp(est[2]-est[1]), shape = exp(est[2])),from=0,to=150)
# fit separately to each country:
fit_eb = viruses %>% filter(conf_isolate == TRUE, ttl < max_lag) %>%
group_by(admin0name) %>%
mutate(n = n()) %>% ungroup %>%
# filter(n >= 2) %>%
split(.$admin0name) %>%
map_df(~{
par = optim(est, function(x){ -sum(dgamma(.x$ttl, rate = exp(x[2] - x[1]),shape = exp(x[2]),log=TRUE)) })$par
tibble(lmu = par[1], lshape = par[2])
}, .id = 'admin0name')
# point estimate of hyper parameters:
lmu_mean = mean(fit_eb$lmu)
lmu_sd = sd(fit_eb$lmu)
lshape_mean = mean(fit_eb$lshape)
lshape_sd = sd(fit_eb$lshape)
#iteratively get posterior mode and update hyper parameter point estimates:
for(i in 1:10){
fit_eb = viruses %>% filter(conf_isolate == TRUE, ttl < max_lag) %>%
group_by(admin0name) %>% mutate(n = n()) %>% ungroup %>%
split(.$admin0name) %>%
map_df(~{
par = optim(est, function(x){
-sum(dgamma(.x$ttl, rate = exp(x[2] - x[1]), shape = exp(x[2]),log=TRUE)) +
0.5*((x[1]-lmu_mean)/lmu_sd)^2 + 0.5*((x[2]-lshape_mean)/lshape_sd)^2})$par
tibble(lmu = par[1], lshape = par[2])
}, .id = 'admin0name')
lmu_mean = mean(fit_eb$lmu)
lmu_sd = sd(fit_eb$lmu)
lshape_mean = mean(fit_eb$lshape)
lshape_sd = sd(fit_eb$lshape)
}
fit_eb = fit_eb %>%
add_row(admin0name = 'other', 'lmu' = lmu_mean, 'lshape'=lshape_mean)
df_fit_eb = expand_grid(admin0name =  c('other',unique(fit_eb$admin0name)), day=0:200)
df_fit_eb = df_fit_eb %>%
left_join(fit_eb) %>%
mutate(dseq = dgamma(day,rate = exp(lshape)/exp(lmu), shape=exp(lshape)),
pseq = pgamma(day,rate = exp(lshape)/exp(lmu), shape=exp(lshape)))
#plot
ggplot() +
geom_histogram(aes(y=after_stat(density),fill=admin0name,x=ttl),data=viruses %>% filter(conf_isolate == TRUE))+
geom_line(aes(x=day,y=dseq),colour='black',linetype=2,data=df_fit_eb) +
facet_wrap(vars(admin0name),scales = 'free_y')+
theme(legend.position = 'none') +
scale_x_continuous('Days Index to Confirmatory Isolate',limits=c(0,max_lag),oob=scales::squish)
ggplot() +
geom_step(aes(colour=admin0name,x=ttl),stat='ecdf',data=viruses %>% filter(conf_isolate, ttl < 365))+
geom_line(aes(x=day,y=pseq),colour='black',linetype=2,data=df_fit_eb) +
facet_wrap(vars(admin0name))+
theme(legend.position = 'none') +
scale_y_continuous('Proportion of cVDPV2 linkages confirmed',breaks = c(0,0.5,1))+
scale_x_continuous('Days Index to Confirmatory Isolate', limits=c(0,max_lag),oob=scales::squish)
# REPEAT, BUT FOR REGIONS INSTEAD OF COUNTRIES
# get initial value from pooled data:
max_lag = 365
xx = viruses %>% filter(conf_isolate == TRUE, ttl < max_lag) %>% pull(ttl)
est = c(log(mean(xx)), log(1))
est = optim(est, function(x){ -sum(dgamma(xx, rate = exp(x[2] - x[1]),shape = exp(x[2]),log=TRUE)) })$par
est
curve(dgamma(x,rate = exp(est[2]-est[1]), shape = exp(est[2])),from=0,to=150)
# fit separately to each region:
fit_eb = viruses %>% filter(conf_isolate == TRUE, ttl < max_lag) %>%
group_by(region_who_code) %>%
mutate(n = n()) %>% ungroup %>%
# filter(n >= 2) %>%
split(.$region_who_code) %>%
map_df(~{
par = optim(est, function(x){ -sum(dgamma(.x$ttl, rate = exp(x[2] - x[1]),shape = exp(x[2]),log=TRUE)) })$par
tibble(lmu = par[1], lshape = par[2])
}, .id = 'region_who_code')
# point estimate of hyper parameters:
lmu_mean = mean(fit_eb$lmu)
lmu_sd = sd(fit_eb$lmu)
lshape_mean = mean(fit_eb$lshape)
lshape_sd = sd(fit_eb$lshape)
#iteratively get posterior mode and update hyper parameter point estimates:
for(i in 1:10){
fit_eb = viruses %>% filter(conf_isolate == TRUE, ttl < max_lag) %>%
group_by(region_who_code) %>% mutate(n = n()) %>% ungroup %>%
split(.$region_who_code) %>%
map_df(~{
par = optim(est, function(x){
-sum(dgamma(.x$ttl, rate = exp(x[2] - x[1]), shape = exp(x[2]),log=TRUE)) +
0.5*((x[1]-lmu_mean)/lmu_sd)^2 + 0.5*((x[2]-lshape_mean)/lshape_sd)^2})$par
tibble(lmu = par[1], lshape = par[2])
}, .id = 'region_who_code')
lmu_mean = mean(fit_eb$lmu)
lmu_sd = sd(fit_eb$lmu)
lshape_mean = mean(fit_eb$lshape)
lshape_sd = sd(fit_eb$lshape)
}
fit_eb = fit_eb %>%
add_row(region_who_code = 'other', 'lmu' = lmu_mean, 'lshape'=lshape_mean)
df_fit_eb = expand_grid(region_who_code =  c('other',unique(fit_eb$region_who_code)), day=0:200)
df_fit_eb = df_fit_eb %>%
left_join(fit_eb) %>%
mutate(dseq = dgamma(day,rate = exp(lshape)/exp(lmu), shape=exp(lshape)),
pseq = pgamma(day,rate = exp(lshape)/exp(lmu), shape=exp(lshape)))
#plot
ggplot() +
geom_histogram(aes(y=after_stat(density),fill=region_who_code,x=ttl),
data=viruses %>% filter(conf_isolate == TRUE, region_who_code %in% c("AFRO", "EMRO")))+
geom_line(aes(x=day,y=dseq),colour='black',linetype=2,data=df_fit_eb %>% filter(region_who_code %in% c("AFRO", "EMRO"))) +
facet_wrap(vars(region_who_code),scales = 'free_y')+
theme(legend.position = 'none') +
scale_x_continuous('Days Index to Confirmatory Isolate',limits=c(0,max_lag),oob=scales::squish)
ggplot() +
geom_step(aes(colour=region_who_code,x=ttl),stat='ecdf',
data=viruses %>% filter(conf_isolate, ttl < 365, region_who_code %in% c("AFRO", "EMRO")))+
geom_line(aes(x=day,y=pseq),colour='black',linetype=2,data=df_fit_eb %>% filter(region_who_code %in% c("AFRO", "EMRO"))) +
facet_wrap(vars(region_who_code))+
theme(legend.position = 'none') +
scale_y_continuous('Proportion of cVDPV2 linkages confirmed',breaks = c(0,0.5,1))+
scale_x_continuous('Days Index to Confirmatory Isolate', limits=c(0,max_lag),oob=scales::squish)
# Convert to months (but they don't fit well...)
df_fit_eb_period <- df_fit_eb %>%
mutate(period = (month(ymd(20230101) + day)-1)/12) %>%
group_by(period, region_who_code) %>%
mutate(dseq = sum(dseq),
pseq = max(pseq)) %>%
filter(row_number()==1)%>%
ungroup()
# Convert to weeks (months don't fit well...)
df_fit_eb_period <- df_fit_eb %>%
mutate(period = (week(ymd(20230101) + day)-1)/52) %>%
group_by(period, region_who_code) %>%
mutate(dseq = sum(dseq),
pseq = max(pseq)) %>%
filter(row_number()==1) %>%
ungroup()
ggplot() +
geom_step(aes(colour=region_who_code,x=ttl),stat='ecdf',
data=viruses %>% filter(conf_isolate, ttl < 365, region_who_code %in% c("AFRO", "EMRO")))+
geom_line(aes(x=day,y=pseq),colour='black',linetype=2,data=df_fit_eb_period %>% filter(region_who_code %in% c("AFRO", "EMRO"))) +
facet_wrap(vars(region_who_code))+
theme(legend.position = 'none') +
scale_y_continuous('Proportion of cVDPV2 linkages confirmed',breaks = c(0,0.5,1))+
scale_x_continuous('Days Index to Confirmatory Isolate', limits=c(0,max_lag),oob=scales::squish)
#### Apply time-to-linkage to any known aVDPV2-n's ####
viruses %>%
filter(conf_isolate == TRUE) %>%
group_by(region_who_code) %>%
# group_by(conf_isolate == TRUE) %>%
summarize(count = n(),
min = min(ttl),
q1 = quantile(ttl, 0.25),
median = median(ttl),
mean = mean(ttl),
q3 = quantile(ttl, 0.75),
q95 = quantile(ttl, 0.95),
max = max(ttl))
# CAR
days_since_isolate <- as.numeric(today()-as.Date("2022-12-24"))
CAR_ttl <- df_fit_eb %>%
# filter(admin0name == "CENTRAL AFRICAN REPUBLIC",
filter(region_who_code == "AFRO",
day <= days_since_isolate)
CAR_lag <- seq_lag_fit %>%
filter(admin0name == "CENTRAL AFRICAN REPUBLIC",
day <= days_since_isolate) %>%
pull(pseq) # want CDF, so use pseq
CAR_ttl <- CAR_ttl %>%
mutate(dseq_lag = dseq * rev(CAR_lag), #multiple prob each day against the cumulative proportion detectable by surv lag
pseq_lag = cumsum(dseq_lag))
tail(CAR_ttl)
# Uganda
# Using AFRO data, 50% at 33 days, 75% at 54 days, 95% at 106
days_since_isolate <- as.numeric(today()-as.Date("2022-02-15"))
UGA_ttl <- df_fit_eb %>%
filter(region_who_code == "AFRO",
day <= days_since_isolate)
UGA_lag <- seq_lag_fit %>%
filter(admin0name == "UGANDA",
day <= days_since_isolate) %>%
pull(pseq) # want CDF, so use pseq
UGA_ttl <- UGA_ttl %>%
mutate(dseq_lag = dseq * rev(UGA_lag), #multiple prob each day against the cumulative proportion detectable by surv lag
pseq_lag = cumsum(dseq_lag))
tail(UGA_ttl)
#### Seeding date for novel VDPV2s ####
# DRC SKV-1
viruses %>% filter(admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO", index_isolate == TRUE) %>%
ggplot(aes(x = vdpv_nt_changes_from_sabin)) + geom_histogram() +
xlab("Index Isolate NT Changes from Sabin") + ggtitle("DRC")
expand_grid(free = c(0,2),t = c(68, 152)/365) %>%
mutate(lower = qpois(0.025,free + 9*t), upper = qpois(0.975,free + 9*t))
index <- as.Date("2022-09-27")
SKV1_emerge <- data.frame(date = rev(seq.Date(from = index - 364, to = index, by = "day")), prob = NA)
SKV1_emerge[,"prob"] <- dpois(1:365, 365*4/9)
ggplot(SKV1_emerge, aes(x = date, y = prob)) +
geom_line() +
geom_vline(xintercept = as.Date("2022-04-28")) +
geom_vline(xintercept = as.Date("2022-07-21")) +
ggtitle("SKV-1 Estimated Seeding Date\nBased on 6nt changes and Sabin-2 mutation rate")
viruses %>% filter(vdpv_emergence_group_name == "RDC-SKV-1")
# DRC TAN-2
index <- as.Date("2022-11-10")
TAN2_emerge <- data.frame(date = rev(seq.Date(from = index - 364, to = index, by = "day")), prob = NA)
TAN2_emerge[,"prob"] <- dpois(1:365, 365*4/9)
ggplot(TAN2_emerge, aes(x = date, y = prob)) +
geom_line() +
geom_vline(xintercept = as.Date("2022-04-28")) +
geom_vline(xintercept = as.Date("2022-07-21")) +
ggtitle("TAN-2 Estimated Seeding Date\nBased on 6nt changes and Sabin-2 mutation rate")
ggplot() +
geom_line(data = SKV1_emerge, aes(x = date, y = prob), color = "red") +
geom_line(data = TAN2_emerge, aes(x = date, y = prob), color = "blue") +
geom_vline(xintercept = as.Date("2022-04-28")) +
geom_vline(xintercept = as.Date("2022-07-21")) +
ggtitle("SKV-1 (red) and TAN-2 (blue) Estimated Seeding Date")
# CAR aVDPV2
index <- as.Date("2022-12-24")
CAR_emerge <- data.frame(date = rev(seq.Date(from = index - 364, to = index, by = "day")), prob = NA)
CAR_emerge[,"prob"] <- dpois(1:365, 365*5/9)
ggplot(CAR_emerge, aes(x = date, y = prob)) +
geom_line() +
geom_vline(xintercept = as.Date("2022-06-05")) +
geom_vline(xintercept = as.Date("2022-08-04")) +
ggtitle("CAR aVDPV2 Estimated Seeding Date\nBased on 7nt changes and Sabin-2 mutation rate")
# DRC Campaigns and Emergences: Seeding Prediction Interval Spread (adapted from Hil)
R1 = ymd(20220428)
R2 = ymd(20220721)
df = tibble(start_date = R1,
date = seq.Date(R1, today(), by = '1 day')) %>%
expand_grid(round = c(1,2)) %>%
mutate(ddiff_R1 = decimal_date(date) - decimal_date(start_date),
ddiff_R2 = if_else(date > R2, decimal_date(date) - decimal_date(R2), 0),
nt_diff_R1_025 = 1 + qpois(0.025, 9*ddiff_R1),
nt_diff_R1_975 = 1 + qpois(0.975, 9*ddiff_R1),
nt_diff_R2_025 = 1 + qpois(0.025, 9*ddiff_R2),
nt_diff_R2_975 = 1 + qpois(0.975, 9*ddiff_R2))
ggplot() +
geom_smooth(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_025),linetype = 1, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_975),linetype = 1, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_025),linetype = 2, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_975),linetype = 2, color = "black", method='lm', se=FALSE) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-SKV-1"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 1) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-TAN-2"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 17) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-SKV-1",
epid == "RDC-SKV-UVI-22-010"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 1, color = "red") +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-TAN-2",
epid == "RDC-TAN-KBL-22-069"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 17, color = "red") +
theme_bw() +
ylab("NT Changes from Sabin2 VP1") +
ggtitle("RDC-SKV-1 and RDC-TAN-2")
# CAR Campaigns and VDPV2: Seeding Prediction Interval Spread
R1 = ymd(20220605)
R2 = ymd(20220804)
df = tibble(start_date = R1,
date = seq.Date(R1, today(), by = '1 day')) %>%
expand_grid(round = c(1,2)) %>%
mutate(ddiff_R1 = decimal_date(date) - decimal_date(start_date),
ddiff_R2 = if_else(date > R2, decimal_date(date) - decimal_date(R2), 0),
nt_diff_R1_025 = 1 + qpois(0.025, 9*ddiff_R1),
nt_diff_R1_975 = 1 + qpois(0.975, 9*ddiff_R1),
nt_diff_R2_025 = 1 + qpois(0.025, 9*ddiff_R2),
nt_diff_R2_975 = 1 + qpois(0.975, 9*ddiff_R2))
ggplot() +
#   geom_step(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_025), col = "grey", method='lm', se=FALSE) +
#   geom_step(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_975), col = "grey", method='lm', se=FALSE) +
#   geom_step(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_025), col = "grey", method='lm', se=FALSE) +
#   geom_step(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_975), col = "grey", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_025),linetype=1, col = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_975),linetype=1, col = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_025),linetype=2, col = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_975),linetype=2, col = "black", method='lm', se=FALSE) +
geom_point(aes(x = ymd(20221224), y = 7)) +
ylab("NT Changes from Sabin2 VP1") +
theme_bw() +
ggtitle("CAR aVDPV2")
# Inputs from time-to-detection distribution: logmean, logsd
m <- 2.460459 #mean log AFP only
s <- 0.2689168 #sd log AFP only
m_es <- 2.16862 #mean log AFP and ES
s_es <- 0.2274121 #sd log AFP and ES
curve(dlnorm(x, meanlog = m, sdlog = s), from=0, to=36)
curve(dlnorm(x, meanlog = m_es, sdlog = s_es), from=0, to=36)
curve(dlnorm(x, meanlog = m*1.25, sdlog = s), from=0, to=36)
sum(dlnorm(1:48, m, s))
cumsum(dlnorm(1:48, m, s)) # 18 month cumsum is 95.6%
cumsum(dlnorm(1:48, m_es, s_es)) # 13 month cumsum is 97.2%
# 7 years of post-switch data, plus 4 years of emergence risk forward
max(data_province$period) - min(data_province$period)
months = (7+4) * 12
periods = seq(as.Date("2016-04-01"), length = months+1, by = "1 month")
periods <- round(year(periods) + (month(periods)-1)/12, digits=3)
# Function to extend vector with zeros
Func_zeros <- function(vector, max=60){
if (length(vector) >= max){
vector[1:max]
} else {
c(vector, rep(0, max-length(vector)))
}
}
# Convolution function
convolve_discrete = function(max_month = 60L,
probs_ttd,
probs_ttl,
probs_seq,
stdize = T,
ttl_include){
if(length(probs_ttd) != max_month |
length(probs_ttl) != max_month |
length(probs_seq) != max_month){
stop("Input probabilities don't match output times")
}
if(stdize){
probs_ttd = probs_ttd / sum(probs_ttd)
probs_ttl = probs_ttl / sum(probs_ttl)
probs_seq = probs_seq / sum(probs_seq) # may return Inf if all zero
}
# if(sum(probs_ttd == 0)) return(tibble(month = 1:max_month, prob = probs_ttd))
if (ttl_include){
tibble(month_ttd = 1:max_month, probs_ttd = probs_ttd) %>%
expand_grid(
tibble(month_ttl = 1:max_month, probs_ttl = probs_ttl)) %>%
expand_grid(
tibble(month_seq = 1:max_month, probs_seq = probs_seq)) %>%
mutate(month = month_ttd + month_ttl + month_seq) %>%
group_by(month) %>%
summarize(prob = sum(probs_ttd*probs_ttl*probs_seq)) %>%
ungroup() %>%
select("month", "prob")
} else{
tibble(month_ttd = 1:max_month, probs_ttd = probs_ttd) %>%
expand_grid(
tibble(month_seq = 1:max_month, probs_seq = probs_seq)) %>%
mutate(month = month_ttd + month_seq) %>%
group_by(month) %>%
summarize(prob = sum(probs_ttd*probs_seq)) %>%
ungroup() %>%
select("month", "prob")
}
}
# time-to-convolution
Func_tt_conv <- function(U_mOPV2,
adm0_name, adm1_name, region,
ES,
mean_log = m, sd_log = s,
mean_log_es = m_es, sd_log_es = s_es,
max = 60,
output = "U_d",
ttl_include = T){
if (ES){
ttd <- dlnorm(1:48, mean_log_es, sd_log_es) %>% Func_zeros()
} else{
ttd <- dlnorm(1:48, mean_log, sd_log) %>% Func_zeros()
}
ttd = ttd/sum(ttd) # standardize
if (region %in% df_fit_eb_period$region_who_code){
ttl <- df_fit_eb_period %>% filter(region_who_code == region) %>% select(dseq)
ttl <- ttl[[1]] %>% Func_zeros()
} else {
cat("Error 1: region_who_code = ", region_who_code)
stop()
}
ttl = ttl/sum(ttl) # standardize
if (adm0_name %in% seq_lag_fit_period$admin0name){
seq <- seq_lag_fit_period %>% filter(admin0name == adm0_name) %>% select(dseq_mean)
seq <- seq[[1]] %>% Func_zeros()
} else {
seq <- seq_lag_fit_period %>% filter(admin0name == "other") %>% select(dseq_mean)
seq <- seq[[1]] %>% Func_zeros()
}
seq = seq/sum(seq) # standardize
tt_conv = convolve_discrete(60, probs_ttd = ttd, probs_ttl = ttl, probs_seq = seq, ttl_include = ttl_include)
min = min(tt_conv$month)
if (min > 1){
temp <- tibble(month = 1:(min-1), prob = 0)
tt_conv <- rbind(temp, tt_conv)
}
U_d <- U_mOPV2 * tt_conv$prob
if (output == "U_d"){
U_d
} else {
list("ttd" = ttd,
"ttl" = ttl,
"seq" = seq,
"tt_conv" = tt_conv,
"U_d" = U_d)
}
}
# Test plot for a sample province
tt_conv_test <- Func_tt_conv(U_mOPV2 = 0.1, adm0_name = "NIGERIA", adm1_name = "BORNO", region = "AFRO", ES = T, output = "all", ttl_include = T)
sum(tt_conv_test$tt_conv$prob)
ggplot() +
geom_line(data = tt_conv_test$tt_conv, aes(x = month, y = prob)) +
geom_line(data = data.frame(ttd = tt_conv_test$ttd, month = 1:60), aes(x = month, y = ttd), color = "red") +
geom_line(data = data.frame(ttl = tt_conv_test$ttl, month = 1:60), aes(x = month, y = ttl), color = "blue") +
geom_line(data = data.frame(seq = tt_conv_test$seq/sum(tt_conv_test$seq), month = 1:60), aes(x = month, y = seq), color = "green") +
scale_x_continuous(limits = c(0,30))
# Estimate U_d_i for each day d and campaign i, depending on AFP+ES and AFP-only status
tt_conv_data <- data_province %>%
filter(is.na(U_mOPV2) == F) %>%
# filter(!(adm0_name %in% c("NIGERIA", "DEMOCRATIC REPUBLIC OF THE CONGO"))) %>%
# filter(period < 2021.750) %>%
select(adm0_name, adm1_name, Region, period, vaccinetype, sabin2, U_mOPV2, ES)
periods_mat <- matrix(nrow = nrow(tt_conv_data), ncol = length(periods),  0)
tt_conv_data <- data.frame(tt_conv_data, periods_mat)
names(tt_conv_data) <- c("adm0_name","adm1_name", "region", "period","vaccinetype","sabin2","U_mOPV2", "ES",
periods)
# Output: Estimate U_d_i for each day d and each campaign i for the probability of detecting an emergence on that day from that campaign
for (i in 1:nrow(tt_conv_data)){
start = which(names(tt_conv_data) == round(tt_conv_data[i, "period"],3))
end = start + 59
tt_conv_data[i, start:end] <- Func_tt_conv(U_mOPV2 = tt_conv_data[i, "U_mOPV2"],
adm0_name = tt_conv_data[i, "adm0_name"],
adm1_name = tt_conv_data[i, "adm1_name"],
region = tt_conv_data[i, "region"],
ES = tt_conv_data[i, "ES"],
ttl_include = F)
}
# calculate sum of U_d for each day d across all campaigns i of each vaccine type.
daily_U_conv <- data.frame(periods = rep(periods, each=2))
daily_U_conv$sabin2 <- c(TRUE, FALSE)
daily_U_conv$U_mOPV2 <- 0
for (i in 9:ncol(tt_conv_data)){
period = names(tt_conv_data)[i]
U_sabin2_sum <- sum(tt_conv_data[tt_conv_data$sabin2 == TRUE, i])
U_nOPV2_sum <- sum(tt_conv_data[tt_conv_data$sabin2 == FALSE, i])
daily_U_conv[daily_U_conv$periods == period & daily_U_conv$sabin2 == TRUE, "U_mOPV2"] <- U_sabin2_sum
daily_U_conv[daily_U_conv$periods == period & daily_U_conv$sabin2 == FALSE, "U_mOPV2"] <- U_nOPV2_sum
}
# Plot points and lines for U_d
ggplot() +
geom_line(data = daily_U_conv, aes(x = periods, y = U_mOPV2, color = sabin2), size = 1) +
geom_vline(xintercept = 2023.25) +
geom_point(data = viruses_count_period %>% filter(emergences > 0), aes(x = period, y = emergences, color = sabin2)) +
theme_bw() +
ylab("Expected cVDPV2 Emergences\n(Assuming Seeding at mOPV2 Rate)") +
xlab("Month") +
scale_y_continuous(limits = c(0, 7)) +
theme(legend.position = c(0.85, 0.85)) +
scale_color_discrete(labels = c("nOPV2", "Sabin2"), name = "Vaccine Type")
# Calculate cdf before defined dates (eg, March 1)
daily_U_conv %>%
filter(periods <= 2023.250) %>%
# filter(periods > 2023.250) %>%
group_by(sabin2) %>%
summarize(sum(U_mOPV2))
