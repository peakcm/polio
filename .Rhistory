#                                                   "NIGERIA"))) +
guides(alpha = "none")
plot +
geom_text_repel(aes(label = vdpv_emergence_group_name, color = source),
show.legend=FALSE, fontface = "bold",
data = viruses_ends  %>%
filter(source == "nOPV2") %>%
filter(emergence_country %in% c("DEMOCRATIC REPUBLIC OF THE CONGO",
"CENTRAL AFRICAN REPUBLIC",
"NIGERIA"))) +
geom_text_repel(aes(label = vdpv_emergence_group_name, color = source),
show.legend=FALSE,
data = viruses_ends  %>%
filter(active == TRUE) %>%
filter(source == "Sabin2") %>%
filter(emergence_country %in% c("DEMOCRATIC REPUBLIC OF THE CONGO",
"CENTRAL AFRICAN REPUBLIC",
"NIGERIA"))) +
guides(alpha = "none")
viruses %>% filter(vdpv_emergence_group_name == "RDC-BUE-1") %>% View()
viruses %>% filter(vdpv_emergence_group_name == "RDC-KOR-1") %>% View()
viruses %>% filter(vdpv_emergence_group_name == "NIE-KOR-XXX") %>% View()
viruses %>% filter(vdpv_emergence_group_name == "NIE-KOR-1") %>% View()
viruses %>% filter(vdpv_emergence_group_name == "NIE-KBS-1") %>% View()
viruses %>% filter(vdpv_emergence_group_name == "NIE-KBS-XXX") %>% View()
viruses %>% View()
library(ggridges)
library(tidyverse)
library(lubridate)
library(PolisAPI)
library(ggrepel)
library(GGally)
viruses %>% View()
viruses %>% filter(index_isolate == TRUE, admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO") %>% View()
viruses %>% filter(index_isolate == TRUE, admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO", virus_date > "2021-01-01") %>% View()
viruses %>% filter(index_isolate == TRUE, admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO", virus_date > "2021-01-01") %>% select(epid, virus_date,adm1name, admin2name, vdpv_emergence_group_name, vdpv_nt_changes_from_sabin, seeding_date, source, active ) %>% View()
viruses %>% filter(index_isolate == TRUE, admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO", virus_date > "2021-01-01") %>% select(epid, virus_date,adm1name, admin2name, vdpv_emergence_group_name, vdpv_nt_changes_from_sabin, seeding_date, source, active)
viruses %>% filter(index_isolate == TRUE, admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO", virus_date > "2021-01-01") %>% select(epid, virus_date,admin1name, admin2name, vdpv_emergence_group_name, vdpv_nt_changes_from_sabin, seeding_date, source, active)
viruses %>% filter(index_isolate == TRUE, admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO", virus_date > "2021-01-01") %>% select(epid, virus_date,admin1name, admin2name, vdpv_emergence_group_name, vdpv_nt_changes_from_sabin, seeding_date, source, active) %>% View()
ggplot(SKV1_emerge, aes(x = date, y = prob)) +
geom_line() +
geom_vline(xintercept = as.Date("2022-04-28")) +
geom_vline(xintercept = as.Date("2022-07-21")) +
ggtitle("SKV-1 Estimated Seeding Date\nBased on 6nt changes and Sabin-2 mutation rate")
ggplot(TAN2_emerge, aes(x = date, y = prob)) +
geom_line() +
geom_vline(xintercept = as.Date("2022-04-28")) +
geom_vline(xintercept = as.Date("2022-07-21")) +
ggtitle("TAN-2 Estimated Seeding Date\nBased on 6nt changes and Sabin-2 mutation rate")
ggplot(CAR_emerge, aes(x = date, y = prob)) +
geom_line() +
geom_vline(xintercept = as.Date("2022-06-05")) +
geom_vline(xintercept = as.Date("2022-08-04")) +
ggtitle("CAR aVDPV2 Estimated Seeding Date\nBased on 7nt changes and Sabin-2 mutation rate")
# DRC Emergences Plot
ggplot() +
geom_smooth(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_025),linetype = 1, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_975),linetype = 1, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_025),linetype = 2, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_975),linetype = 2, color = "black", method='lm', se=FALSE) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-SKV-1"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 1) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-TAN-2"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 17) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-SKV-1",
epid == "RDC-SKV-UVI-22-010"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 1, color = "red") +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-TAN-2",
epid == "RDC-TAN-KBL-22-069"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 17, color = "red") +
theme_bw() +
ylab("NT Changes from Sabin2 VP1") +
ggtitle("RDC-SKV-1 and RDC-TAN-2")
ggplot() +
geom_line(data = SKV1_emerge, aes(x = date, y = prob), color = "red") +
geom_line(data = TAN2_emerge, aes(x = date, y = prob), color = "blue") +
geom_vline(xintercept = as.Date("2022-04-28")) +
geom_vline(xintercept = as.Date("2022-07-21")) +
ggtitle("SKV-1 (red) and TAN-2 (blue) Estimated Seeding Date")
# DRC Emergences Plot
ggplot() +
geom_smooth(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_025),linetype = 1, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 1), aes(x=date, y=nt_diff_R1_975),linetype = 1, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_025),linetype = 2, color = "black", method='lm', se=FALSE) +
geom_smooth(data = df %>% filter(round == 2, date > R2), aes(x=date, y=nt_diff_R2_975),linetype = 2, color = "black", method='lm', se=FALSE) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-SKV-1"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 1) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-TAN-2"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 17) +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-SKV-1",
epid == "RDC-SKV-UVI-22-010"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 1, color = "red") +
geom_point(data = viruses %>% filter(vdpv_emergence_group_name == "RDC-TAN-2",
epid == "RDC-TAN-KBL-22-069"),
aes(x = virus_date, y = vdpv_nt_changes_from_sabin), shape = 17, color = "red") +
theme_bw() +
ylab("NT Changes from Sabin2 VP1") +
ggtitle("RDC-SKV-1 and RDC-TAN-2")
viruses %>% filter(index_isolate == TRUE, admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO", virus_date > "2021-01-01") %>% select(epid, virus_date,admin1name, admin2name, vdpv_emergence_group_name, vdpv_nt_changes_from_sabin, seeding_date, source, active)
viruses %>% filter(index_isolate == TRUE, admin0name == "DEMOCRATIC REPUBLIC OF THE CONGO", virus_date > "2021-01-01") %>% select(epid, virus_date,admin1name, admin2name, vdpv_emergence_group_name, vdpv_nt_changes_from_sabin, seeding_date, source, active) %>% View()
df = tibble(start_date = R1,
date = seq.Date(R1, today(), by = '1 day')) %>%
expand_grid(round = c(1,2)) %>%
mutate(ddiff_R1 = decimal_date(date) - decimal_date(start_date),
ddiff_R2 = if_else(date > R2, decimal_date(date) - decimal_date(R2), 0),
nt_diff_R1_025 = 1 + qpois(0.025, 9*ddiff_R1),
nt_diff_R1_975 = 1 + qpois(0.975, 9*ddiff_R1),
nt_diff_R2_025 = 1 + qpois(0.025, 9*ddiff_R2),
nt_diff_R2_975 = 1 + qpois(0.975, 9*ddiff_R2))
R1
R1 = "2022-04-17"
df = tibble(start_date = R1,
date = seq.Date(R1, today(), by = '1 day')) %>%
expand_grid(round = c(1,2)) %>%
mutate(ddiff_R1 = decimal_date(date) - decimal_date(start_date),
ddiff_R2 = if_else(date > R2, decimal_date(date) - decimal_date(R2), 0),
nt_diff_R1_025 = 1 + qpois(0.025, 9*ddiff_R1),
nt_diff_R1_975 = 1 + qpois(0.975, 9*ddiff_R1),
nt_diff_R2_025 = 1 + qpois(0.025, 9*ddiff_R2),
nt_diff_R2_975 = 1 + qpois(0.975, 9*ddiff_R2))
R1 = ymd(20220417)
df = tibble(start_date = R1,
date = seq.Date(R1, today(), by = '1 day')) %>%
expand_grid(round = c(1,2)) %>%
mutate(ddiff_R1 = decimal_date(date) - decimal_date(start_date),
ddiff_R2 = if_else(date > R2, decimal_date(date) - decimal_date(R2), 0),
nt_diff_R1_025 = 1 + qpois(0.025, 9*ddiff_R1),
nt_diff_R1_975 = 1 + qpois(0.975, 9*ddiff_R1),
nt_diff_R2_025 = 1 + qpois(0.025, 9*ddiff_R2),
nt_diff_R2_975 = 1 + qpois(0.975, 9*ddiff_R2))
# DRC Campaigns and Emergences: Seeding Prediction Interval Spread (adapted from Hil)
R1 = ymd(20220428)
R2 = ymd(20220721)
df = tibble(start_date = R1,
date = seq.Date(R1, today(), by = '1 day')) %>%
expand_grid(round = c(1,2)) %>%
mutate(ddiff_R1 = decimal_date(date) - decimal_date(start_date),
ddiff_R2 = if_else(date > R2, decimal_date(date) - decimal_date(R2), 0),
nt_diff_R1_025 = 1 + qpois(0.025, 9*ddiff_R1),
nt_diff_R1_975 = 1 + qpois(0.975, 9*ddiff_R1),
nt_diff_R2_025 = 1 + qpois(0.025, 9*ddiff_R2),
nt_diff_R2_975 = 1 + qpois(0.975, 9*ddiff_R2))
tibble(start_date = R1,
date = seq.Date(R1, today(), by = '1 day')) %>%
expand_grid(round = c(1,2)) %>%
mutate(ddiff_R1 = decimal_date(date) - decimal_date(start_date),
ddiff_R2 = if_else(date > R2, decimal_date(date) - decimal_date(R2), 0),
nt_diff_R1_025 = 1 + qpois(0.025, 9*ddiff_R1),
nt_diff_R1_975 = 1 + qpois(0.975, 9*ddiff_R1),
nt_diff_R2_025 = 1 + qpois(0.025, 9*ddiff_R2),
nt_diff_R2_975 = 1 + qpois(0.975, 9*ddiff_R2))
expand_grid(free = c(0,2),t = c(68, 152)/365) %>%
mutate(lower = qpois(0.025,free + 9*t), upper = qpois(0.975,free + 9*t))
expand_grid(free = c(0,2),t = c(273)/365) %>%
mutate(lower = qpois(0.025,free + 9*t), upper = qpois(0.975,free + 9*t))
#### Load Libraries ####
library(ggridges)
library(tidyverse)
library(lubridate)
library(PolisAPI)
library(ggrepel)
library(GGally)
#### Helper functions ####
#Create region from ADM_0
Func_region = function(ADM_0){
EMRO <- c("AFGHANISTAN", "EGYPT", "IRAQ", "PAKISTAN", "SOMALIA", "SUDAN", "DJIBOUTI",
"IRAN (ISLAMIC REPUBLIC OF)", "LIBYA", "SYRIAN ARAB REPUBLIC", "YEMEN")
WPRO <- c("PHILIPPINES", "MALAYSIA")
SEARO <- c("INDONESIA", "MYANMAR")
EURO <- c("TAJIKISTAN")
ifelse(ADM_0 %in% EMRO, "EMRO",
ifelse(ADM_0 %in% WPRO, "WPRO",
ifelse(ADM_0 %in% SEARO, "SEARO",
ifelse(ADM_0 %in% EURO, "EURO",
"AFRO"))))
}
#### Load Target Pops from disaggregate_polis_pop ####
# Cross-check numbers against nOPV2 campaign tracker
polis_pops <- readRDS("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/results/sia_polis_target_pop.rds")
names(polis_pops)[13] <- "GUID"
# Add fields
polis_pops$period <- year(polis_pops$start_date) + (month(polis_pops$start_date)-1)/12
polis_pops$quarter <- year(polis_pops$start_date) + (quarter(polis_pops$start_date)-1)/4
polis_pops$source <- ifelse(polis_pops$vaccinetype == "nOPV2", "nOPV2", "Sabin2")
unique(polis_pops$adm0_name)
polis_pops$region <- Func_region(polis_pops$adm0_name)
# polis_pops %>% group_by(adm0_name) %>% summarize(region = unique(region)) %>%View()
# Clean data
polis_pops <- polis_pops %>% filter(start_date < today())
polis_pops %>% ungroup() %>% filter(vaccinetype == "nOPV2")  %>% summarize(pop= sum(target_pop, na.rm = T))
# polis_pops %>% ungroup() %>% filter(vaccinetype == "nOPV2") %>%
#     group_by(adm0_name) %>% summarize(pop= sum(target_pop, na.rm = T)) %>% View()
# polis_pops %>% ungroup() %>% filter(vaccinetype == "nOPV2") %>%
#   filter(adm0_name == "NIGERIA") %>%
#   group_by(parentactivitycode, adm0_name, start_date) %>% summarize(date = unique(start_date),pop= sum(target_pop)) %>% View()
# Manually remove campaigns that didn't happen (yet)
not_campaigns <- c("BFA-2022-002", "COD-2023-003", "NGA-2023-039")
polis_pops[polis_pops$parentactivitycode %in% not_campaigns, "target_pop"] <- 0
# Add pop to campaigns missing it
eth_rows <- polis_pops %>% filter(parentactivitycode == "ETH-2021-003") %>% nrow()
polis_pops[polis_pops$parentactivitycode == "ETH-2021-003", "target_pop"] <- 16712725/eth_rows
# Mali number too small compared with nOPV tracker
polis_pops[polis_pops$parentactivitycode == "MLI-2023-001", "target_pop"] <- 5225530/1425537 * polis_pops[polis_pops$parentactivitycode == "MLI-2023-001", "target_pop"]
# Manually distribute 11m to Indonesia equally across districts
indo_rows <- polis_pops %>% filter(vaccinetype=="nOPV2", adm0_name == "INDONESIA") %>% nrow()
polis_pops[polis_pops$adm0_name == "INDONESIA", "target_pop"] <- 11e6/indo_rows
# Gut check nOPV2 usage
polis_pops %>% filter(vaccinetype == "nOPV2") %>% summarize(pop = sum(target_pop, na.rm=T))
polis_pops %>% filter(vaccinetype == "nOPV2", start_date < today() - 8*30) %>% summarize(pop = sum(target_pop, na.rm=T))
# polis_pops %>% filter(vaccinetype == "nOPV2", start_date < today()) %>%
#   group_by(adm0_name) %>%  summarize(pop = sum(target_pop, na.rm=T)/1e6) %>% View()
polis_pops %>% filter(vaccinetype %in% c("mOPV2"), start_date < today() - 8*30) %>% summarize(pop = sum(target_pop, na.rm=T))
polis_pops %>% filter(vaccinetype %in% c("tOPV"), start_date < today() - 8*30) %>% summarize(pop = sum(target_pop, na.rm=T))
polis_pops %>% filter(vaccinetype %in% c("mOPV2", "tOPV"), start_date < today() - 8*30) %>% summarize(pop = sum(target_pop, na.rm=T))
# vaccine usage
polis_pops %>% filter(region %in% c("AFRO", "EMRO", "EURO")) %>% group_by(source) %>% summarize(pop = sum(target_pop, na.rm=T))
polis_pops %>% group_by(source, parentactivitycode) %>%
filter(region %in% c("AFRO", "EMRO", "EURO")) %>%
summarize(sum = sum(target_pop, na.rm=T)) %>%
ungroup() %>%
group_by(source) %>%
summarize(count = n(),
min = min(sum),
q1 = quantile(sum, 0.25),
median = median(sum),
mean = mean(sum),
q3 = quantile(sum, 0.75),
max = max(sum))
# Simplify fields
polis_pops <- polis_pops %>%
filter(start_date > "2016-05-01") %>%
select(adm0_name, adm1_name, adm2_name, parentactivitycode,  childactivitycode,
start_date, vaccinetype, GUID,
target_pop, period, quarter, source, region)
sias_figure <- polis_pops %>% group_by(quarter, source) %>% summarize(target_pop = sum(target_pop, na.rm=T))
ggplot(sias_figure, aes(x = quarter, y = target_pop, color = source)) +  geom_line()
# #### POLIS SIA data ####
# token = readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
# sias = get_polis_activities(token = token, min_date = "2016-05-01")
# sias <- sias %>% filter(is.na(activity_parent_code) == FALSE,
#                         activity_vaccine_type %in% c("nOPV2", "mOPV2", "tOPV"),
#                         activity_date_from > 2016-05-01,
#                         # activity_date_from < 2023-03-01,
#                         activity_status == "Done")
# sias$nb_doses <- as.numeric(sias$nb_doses)
#
# sias$target_population <- as.numeric(sias$target_population)
# sias <- sias %>% mutate(wastage_factor = nb_doses / target_population)
# ggplot(sias, aes(x = wastage_factor, color = activity_vaccine_type)) + geom_density()
# sias %>% group_by(activity_vaccine_type) %>% summarize(w.mean = weighted.mean(wastage_factor, nb_doses, na.rm=T))
#
# # gut-check - Calculate doses given.
# sias %>% filter(activity_vaccine_type == "nOPV2", activity_date_from < today()) %>% {sum(.$target_population)}
# sias %>% filter(activity_vaccine_type == "nOPV2", activity_date_from < today()) %>% {sum(.$nb_doses)}
# sias %>% filter(activity_vaccine_type == "nOPV2", activity_date_from < today()-8*30) %>% {sum(.$nb_doses)}
# sias %>% filter(activity_vaccine_type == "nOPV2", activity_date_from < today()) %>%
#   group_by(admin0name) %>% summarize(doses = sum(nb_doses), pop = sum(target_population)) %>% View()
#
# sias %>% filter(activity_vaccine_type == "mOPV2", activity_date_from < today()) %>% {sum(.$nb_doses, na.rm=T)}
# sias %>% filter(activity_vaccine_type == "tOPV", activity_date_from < today()) %>% {sum(.$nb_doses, na.rm=T)}
# sias %>% filter(activity_vaccine_type %in% c("mOPV2", "tOPV"), activity_date_from < today()) %>% {sum(.$target_population, na.rm=T)}
#
# sias %>% filter(activity_vaccine_type == "nOPV2", activity_date_from < today()) %>% {sum(.$target_population)}
#
# polis_pops %>% group_by(vaccinetype, parentactivitycode) %>%
#   summarize(sum = sum(target_pop, na.rm=T)) %>%
#   ungroup() %>%
#   group_by(vaccinetype) %>%
#   summarize(count = n(),
#             min = min(sum),
#             q1 = quantile(sum, 0.25),
#             median = median(sum),
#             mean = mean(sum),
#             q3 = quantile(sum, 0.75),
#             max = max(sum))
#
# # Create source variable
# sias$source <- ifelse(sias$activity_vaccine_type == "nOPV2", "nOPV2", "Sabin2")
#
# # Create week, period, quarter variables
# sias$week <- year(sias$activity_date_from) + (week(sias$activity_date_from)-1)/52
# sias$period <- year(sias$activity_date_from) + (month(sias$activity_date_from)-1)/12
# sias$quarter <- year(sias$activity_date_from) + (quarter(sias$activity_date_from)-1)/4
#
# sias_figure <- sias %>% group_by(quarter, source) %>% summarize(doses = sum(nb_doses))
# ggplot(sias_figure, aes(x = quarter, y = doses, color = source)) +  geom_line()
#
# # Countries with responses by year
# sias %>% group_by(quarter, admin0name) %>% summarize(count = n()) %>%
#   group_by(quarter) %>% summarize(count = n()) %>%
#   ggplot(aes(x = quarter, y = count)) + geom_col() +
#     ylab("Number of Countries with Type-2 SIA")
#
#### POLIS Virus data ####
token = readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
viruses = viruses %>%
select(id, epid, virus_date, surveillance_type_name, region_who_code,
admin0name, country_iso3code, admin1name, admin1guid, admin2name, admin2guid,
virus_type_name, vdpv_classification_name, vdpv_emergence_group_name,
vdpv_nt_changes_from_sabin, surveillance_type_name) %>%
mutate(virus_date = ymd(virus_date),
id = as.numeric(id),
dot_name = paste(admin0name, admin1name, sep = ":"),
dot_year_month = tolower(paste(year(virus_date), month(virus_date), sep = ":")))
token
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
# sias_figure <- sias %>% group_by(quarter, source) %>% summarize(doses = sum(nb_doses))
# ggplot(sias_figure, aes(x = quarter, y = doses, color = source)) +  geom_line()
#
# # Countries with responses by year
# sias %>% group_by(quarter, admin0name) %>% summarize(count = n()) %>%
#   group_by(quarter) %>% summarize(count = n()) %>%
#   ggplot(aes(x = quarter, y = count)) + geom_col() +
#     ylab("Number of Countries with Type-2 SIA")
#
#### POLIS Virus data ####
token = readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
# sias_figure <- sias %>% group_by(quarter, source) %>% summarize(doses = sum(nb_doses))
# ggplot(sias_figure, aes(x = quarter, y = doses, color = source)) +  geom_line()
#
# # Countries with responses by year
# sias %>% group_by(quarter, admin0name) %>% summarize(count = n()) %>%
#   group_by(quarter) %>% summarize(count = n()) %>%
#   ggplot(aes(x = quarter, y = count)) + geom_col() +
#     ylab("Number of Countries with Type-2 SIA")
#
#### POLIS Virus data ####
token = readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
library(PolisAPI)
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
?get_polis_virus
token
token
readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
# sias_figure <- sias %>% group_by(quarter, source) %>% summarize(doses = sum(nb_doses))
# ggplot(sias_figure, aes(x = quarter, y = doses, color = source)) +  geom_line()
#
# # Countries with responses by year
# sias %>% group_by(quarter, admin0name) %>% summarize(count = n()) %>%
#   group_by(quarter) %>% summarize(count = n()) %>%
#   ggplot(aes(x = quarter, y = count)) + geom_col() +
#     ylab("Number of Countries with Type-2 SIA")
#
#### POLIS Virus data ####
token = readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
token
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
library(ggridges)
library(tidyverse)
library(lubridate)
library(PolisAPI)
library(ggrepel)
library(GGally)
# sias_figure <- sias %>% group_by(quarter, source) %>% summarize(doses = sum(nb_doses))
# ggplot(sias_figure, aes(x = quarter, y = doses, color = source)) +  geom_line()
#
# # Countries with responses by year
# sias %>% group_by(quarter, admin0name) %>% summarize(count = n()) %>%
#   group_by(quarter) %>% summarize(count = n()) %>%
#   ggplot(aes(x = quarter, y = count)) + geom_col() +
#     ylab("Number of Countries with Type-2 SIA")
#
#### POLIS Virus data ####
token = readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
library(PolisAPI)
library(PolisAPI)
library(ggrepel)
library(PolisAPI)
library(PolisAPI)
# sias_figure <- sias %>% group_by(quarter, source) %>% summarize(doses = sum(nb_doses))
# ggplot(sias_figure, aes(x = quarter, y = doses, color = source)) +  geom_line()
#
# # Countries with responses by year
# sias %>% group_by(quarter, admin0name) %>% summarize(count = n()) %>%
#   group_by(quarter) %>% summarize(count = n()) %>%
#   ggplot(aes(x = quarter, y = count)) + geom_col() +
#     ylab("Number of Countries with Type-2 SIA")
#
#### POLIS Virus data ####
token = readLines("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")[1]
token
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
install.packages("assertthat")
viruses = get_polis_virus(token = token, min_date = "2016-05-01", virus_id = 4)
dim(viruses)
View(viruses)
#### Load Libraries ####
library(ggridges)
library(tidyverse)
library(lubridate)
library(PolisAPI)
library(ggrepel)
library(GGally)
#### Helper functions ####
#Create region from ADM_0
Func_region = function(ADM_0){
EMRO <- c("AFGHANISTAN", "EGYPT", "IRAQ", "PAKISTAN", "SOMALIA", "SUDAN", "DJIBOUTI",
"IRAN (ISLAMIC REPUBLIC OF)", "LIBYA", "SYRIAN ARAB REPUBLIC", "YEMEN")
WPRO <- c("PHILIPPINES", "MALAYSIA")
SEARO <- c("INDONESIA", "MYANMAR")
EURO <- c("TAJIKISTAN")
ifelse(ADM_0 %in% EMRO, "EMRO",
ifelse(ADM_0 %in% WPRO, "WPRO",
ifelse(ADM_0 %in% SEARO, "SEARO",
ifelse(ADM_0 %in% EURO, "EURO",
"AFRO"))))
}
#### Load Target Pops from disaggregate_polis_pop ####
# Cross-check numbers against nOPV2 campaign tracker
polis_pops <- readRDS("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/results/sia_polis_target_pop.rds")
names(polis_pops)[13] <- "GUID"
# Add fields
polis_pops$period <- year(polis_pops$start_date) + (month(polis_pops$start_date)-1)/12
polis_pops$quarter <- year(polis_pops$start_date) + (quarter(polis_pops$start_date)-1)/4
polis_pops$source <- ifelse(polis_pops$vaccinetype == "nOPV2", "nOPV2", "Sabin2")
unique(polis_pops$adm0_name)
polis_pops$region <- Func_region(polis_pops$adm0_name)
# polis_pops %>% group_by(adm0_name) %>% summarize(region = unique(region)) %>%View()
# Clean data
polis_pops <- polis_pops %>% filter(start_date < today())
polis_pops %>% ungroup() %>% filter(vaccinetype == "nOPV2")  %>% summarize(pop= sum(target_pop, na.rm = T))
# polis_pops %>% ungroup() %>% filter(vaccinetype == "nOPV2") %>%
#     group_by(adm0_name) %>% summarize(pop= sum(target_pop, na.rm = T)) %>% View()
# polis_pops %>% ungroup() %>% filter(vaccinetype == "nOPV2") %>%
#   filter(adm0_name == "NIGERIA") %>%
#   group_by(parentactivitycode, adm0_name, start_date) %>% summarize(date = unique(start_date),pop= sum(target_pop)) %>% View()
# Manually remove campaigns that didn't happen (yet)
not_campaigns <- c("BFA-2022-002", "COD-2023-003", "NGA-2023-039")
polis_pops[polis_pops$parentactivitycode %in% not_campaigns, "target_pop"] <- 0
# Add pop to campaigns missing it
eth_rows <- polis_pops %>% filter(parentactivitycode == "ETH-2021-003") %>% nrow()
polis_pops[polis_pops$parentactivitycode == "ETH-2021-003", "target_pop"] <- 16712725/eth_rows
# Mali number too small compared with nOPV tracker
polis_pops[polis_pops$parentactivitycode == "MLI-2023-001", "target_pop"] <- 5225530/1425537 * polis_pops[polis_pops$parentactivitycode == "MLI-2023-001", "target_pop"]
# Manually distribute 11m to Indonesia equally across districts
indo_rows <- polis_pops %>% filter(vaccinetype=="nOPV2", adm0_name == "INDONESIA") %>% nrow()
polis_pops[polis_pops$adm0_name == "INDONESIA", "target_pop"] <- 11e6/indo_rows
# Gut check nOPV2 usage
polis_pops %>% filter(vaccinetype == "nOPV2") %>% summarize(pop = sum(target_pop, na.rm=T))
polis_pops %>% filter(vaccinetype == "nOPV2", start_date < today() - 8*30) %>% summarize(pop = sum(target_pop, na.rm=T))
# polis_pops %>% filter(vaccinetype == "nOPV2", start_date < today()) %>%
#   group_by(adm0_name) %>%  summarize(pop = sum(target_pop, na.rm=T)/1e6) %>% View()
polis_pops %>% filter(vaccinetype %in% c("mOPV2"), start_date < today() - 8*30) %>% summarize(pop = sum(target_pop, na.rm=T))
polis_pops %>% filter(vaccinetype %in% c("tOPV"), start_date < today() - 8*30) %>% summarize(pop = sum(target_pop, na.rm=T))
polis_pops %>% filter(vaccinetype %in% c("mOPV2", "tOPV"), start_date < today() - 8*30) %>% summarize(pop = sum(target_pop, na.rm=T))
# vaccine usage
polis_pops %>% filter(region %in% c("AFRO", "EMRO", "EURO")) %>% group_by(source) %>% summarize(pop = sum(target_pop, na.rm=T))
polis_pops %>% group_by(source, parentactivitycode) %>%
filter(region %in% c("AFRO", "EMRO", "EURO")) %>%
summarize(sum = sum(target_pop, na.rm=T)) %>%
ungroup() %>%
group_by(source) %>%
summarize(count = n(),
min = min(sum),
q1 = quantile(sum, 0.25),
median = median(sum),
mean = mean(sum),
q3 = quantile(sum, 0.75),
max = max(sum))
# Simplify fields
polis_pops <- polis_pops %>%
filter(start_date > "2016-05-01") %>%
select(adm0_name, adm1_name, adm2_name, parentactivitycode,  childactivitycode,
start_date, vaccinetype, GUID,
target_pop, period, quarter, source, region)
sias_figure <- polis_pops %>% group_by(quarter, source) %>% summarize(target_pop = sum(target_pop, na.rm=T))
ggplot(sias_figure, aes(x = quarter, y = target_pop, color = source)) +  geom_line()
polis_pops <- readRDS("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/results/sia_polis_target_pop.rds")
rm(list=ls())
library(PolisAPI)
library(httr)
get_polis_url2 <- function(my_url, verbose = T, clean = T, cast=TRUE, ntries = 3, count = FALSE, api_token = get_token()){
all_results = NULL
initial_query = my_url
while(!is.null(my_url)){
result = 404L
try_count = 1
while(http_error(result) & try_count <= ntries){
result = GET(my_url, add_headers("authorization-token" = api_token))
try_count = try_count + 1
}
stop_for_status(result, task = 'pull data from POLIS')
result_content = content(result, type='text', encoding = 'UTF-8')
assertthat::assert_that(jsonlite::validate(result_content), msg = 'POLIS data not in JSON format')
result_content = jsonlite::fromJSON(result_content)
all_results = bind_rows(all_results,mutate_all(result_content$value,as.character))
my_url =result_content$odata.nextLink
if(verbose) cat('.')
}
if(!is.null(result_content$odata.count)){
if(nrow(all_results) != as.numeric(result_content$odata.count)){
warning(paste0('Expected ',result_content$odata.count, ' results, returned ',nrow(all_results)))
}
}
if(clean) all_results = all_results %>% PolisAPI:::clean_polis()
if(cast) all_results = cast_polis(all_results, PolisAPI:::polis_table_name(initial_query))
attr(all_results,'query') = initial_query
return(all_results)
}
set_token("C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub/polio-immunity-mapping/data_local/token.txt")
sia_url <- "https://extranet.who.int/polis/api/v2/SubActivity?$filter=(DateFrom ge DateTime'2014-01-01') and (VaccineType eq 'mOPV2' or VaccineType eq 'tOPV' or VaccineType eq 'nOPV2' or VaccineType eq 'OPV2*')"
sia_polis <- get_polis_url2(URLencode(sia_url))
sia_tsir <- read_csv('C:/Users/coreype/OneDrive - Bill & Melinda Gates Foundation/Documents/GitHub//polio-immunity-mapping/results/sia_district_rows.csv') %>%
janitor::clean_names()
